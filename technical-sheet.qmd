# 技术内幕

这一部分，我们将解释 `AI-Paper` 系统的工作原理，主要包括以下几个方面：

## 采集文献

这一步，系统首先通过 CrossRef 批量采集与指定主题相关的文献。用户可以通过设置关键词、时间范围等参数，来获取特定领域的文献数据。

```python
import openai
import requests
import yaml
import time
import logging
import json
import os
import textwrap

# ------------------------------------------------------------
# 日志配置：将日志级别设为 INFO，并统一日志格式
# ------------------------------------------------------------
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# ------------------------------------------------------------
# 读取环境变量（env.yml）以及相关配置
# ------------------------------------------------------------
def read_env(env_file="env.yml"):
    try:
        with open(env_file, "r", encoding="utf-8") as f:
            env_config = yaml.safe_load(f)
            return env_config
    except Exception as e:
        logging.error(f"读取配置文件 {env_file} 失败: {e}")
        return {}

env_config = read_env()
# 从环境中获取 API Key 与 Zotero 的用户信息
BAI_LIAN_API_KEY = env_config.get("Bai_Lian_API_KEY", "")
openai.api_key = BAI_LIAN_API_KEY
openai.api_base = "https://dashscope.aliyuncs.com/compatible-mode/v1"

ZOTERO_USER_ID = env_config.get("Zotero_user_id", "")
ZOTERO_API_KEY = env_config.get("Zotero_API_KEY", "")
ZOTERO_UPLOAD_URL = f"https://api.zotero.org/users/{ZOTERO_USER_ID}/items"

# ------------------------------------------------------------
# 读取配置文件（config.yaml）
# ------------------------------------------------------------
def read_config(config_file="config.yaml"):
    try:
        with open(config_file, "r", encoding="utf-8") as f:
            config_data = yaml.safe_load(f)
            return config_data
    except Exception as e:
        logging.error(f"读取配置文件 {config_file} 时出错: {e}")
        return {}

# ------------------------------------------------------------
# 函数：fetch_crossref
# 作用：调用 CrossRef API 根据查询条件获取文献数据
# ------------------------------------------------------------
def fetch_crossref(query, year_range):
    url = "https://api.crossref.org/works"
    try:
        year_from, year_until = year_range.split('-')
    except ValueError:
        logging.error("出版年份范围格式错误，应为 'YYYY-YYYY'")
        return []

    params = {
        "query": query,
        "filter": f"from-pub-date:{year_from},until-pub-date:{year_until}",
        "rows": 50  # 可根据需要调整获取文献数量
    }
    headers = {
        "User-Agent": "DocumentManager/1.0 (mailto:your_email@example.com)"  # 请替换为你自己的邮箱
    }
    try:
        response = requests.get(url, params=params, headers=headers)
        if response.status_code == 200:
            items = response.json().get('message', {}).get('items', [])
            return items
        else:
            logging.error(f"CrossRef请求失败，状态码：{response.status_code}")
            return []
    except Exception as e:
        logging.error(f"请求 CrossRef 时出错: {e}")
        return []
```
## 筛选文献

```python
# ------------------------------------------------------------
# 函数：qwen_api_call
# 作用：调用 Qwen API 生成对话回复（主要用于获取文献相关性评分）
# ------------------------------------------------------------
def qwen_api_call(prompt, model="qwen-max"):
    try:
        completion = openai.ChatCompletion.create(
            model=model,
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.0,  # 保证输出稳定
            top_p=1.0,
            max_tokens=10    # 输出长度，可根据需要调整
        )
        return completion.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"Qwen API 调用失败：{e}")
        return ""

# ------------------------------------------------------------
# 函数：ai_filter_qwen
# 作用：利用 Qwen API 对文献与给定方向的相关性进行评分
# ------------------------------------------------------------
def ai_filter_qwen(item, direction, threshold=0.6):
    prompt = textwrap.dedent(f"""
        请判断以下文献是否与“{direction}”密切相关，并请仅返回一个0到1之间的评分（保留两位小数）。

        标题：{item.get('title', '无标题')}
        摘要：{item.get('abstract', '无摘要')}

        评分标准：
        0.00 表示完全不相关，1.00 表示高度相关。
    """)
    response = qwen_api_call(prompt)
    try:
        score = float(response)
        logging.info(f"文献《{item['title'][:30]}...》评分：{score}")
        return score >= threshold
    except ValueError as e:
        logging.error(f"评分解析错误：{e}，返回内容：{response}")
        return False

```



## 归档文献

```python

# ------------------------------------------------------------
# 函数：save_filtered_items
# 作用：将过滤后的文献信息保存到 YAML 文件
# ------------------------------------------------------------
def save_filtered_items(filtered_items, filename="filtered_items.yaml"):
    try:
        with open(filename, "w", encoding="utf-8") as f:
            yaml.safe_dump(filtered_items, f, allow_unicode=True)
        logging.info(f"过滤后的文献信息已保存至 {filename}")
    except Exception as e:
        logging.error(f"保存文件 {filename} 时出错: {e}")

# ------------------------------------------------------------
# 函数：load_filtered_items
# 作用：从 YAML 文件中读取之前筛选好的文献信息
# ------------------------------------------------------------
def load_filtered_items(filename="filtered_items.yaml"):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            items = yaml.safe_load(f)
        if items:
            logging.info(f"成功读取 {len(items)} 篇筛选后的文献。")
            return items
        else:
            logging.info("没有找到任何筛选后的文献。")
            return []
    except Exception as e:
        logging.error(f"读取文件 {filename} 时出错: {e}")
        return []

# ------------------------------------------------------------
# 函数：convert_to_zotero_format
# 作用：转换单个文献信息为符合 Zotero API 要求的数据格式
# ------------------------------------------------------------
def convert_to_zotero_format(item):
    zotero_item = {
        "itemType": "journalArticle",
        "title": item.get("title", "无标题"),
        "abstractNote": item.get("abstract", ""),
        "creators": [],
        "date": str(item.get("date", "")),
        "DOI": item.get("DOI", "")
    }
    for author in item.get("authors", []):
        if isinstance(author, dict):
            if "firstName" in author and "lastName" in author:
                creator = {
                    "creatorType": "author",
                    "firstName": author["firstName"],
                    "lastName": author["lastName"]
                }
            else:
                creator = {"creatorType": "author", "lastName": author.get("name", "").strip()}
            zotero_item["creators"].append(creator)
        elif isinstance(author, str):
            # 如果作者仅为字符串形式
            zotero_item["creators"].append({"creatorType": "author", "lastName": author.strip()})
    return zotero_item

# ------------------------------------------------------------
# 函数：upload_items_to_zotero
# 作用：将转换后的文献数据上传到 Zotero
# ------------------------------------------------------------
def upload_items_to_zotero(items):
    headers = {
        "Zotero-API-Key": ZOTERO_API_KEY,
        "Content-Type": "application/json",
        "Accept": "application/json"
    }
    zotero_items = [convert_to_zotero_format(item) for item in items]
    payload = json.dumps(zotero_items, ensure_ascii=False)
    try:
        response = requests.post(ZOTERO_UPLOAD_URL, headers=headers, data=payload)
        if response.status_code in (200, 201):
            logging.info("文献上传成功！")
            try:
                resp_json = response.json()
                logging.info("服务器返回的信息：")
                logging.info(json.dumps(resp_json, ensure_ascii=False, indent=2))
            except Exception as err:
                logging.error(f"解析服务器返回数据时出错：{err}")
        else:
            logging.error(f"上传失败，状态码: {response.status_code}")
            logging.error(f"响应内容：{response.text}")
    except Exception as e:
        logging.error(f"上传过程中出现错误：{e}")

```

```python
# ------------------------------------------------------------
# 主函数：整合跨平台文献筛选与上传流程
# ------------------------------------------------------------
def main():
    # 第一阶段：根据配置文件，从 CrossRef 获取文献并使用 Qwen API 过滤
    config = read_config()
    direction = config.get("direction", "")
    keywords = " ".join(config.get("keywords", []))
    publication_year = config.get("publication_year", "")
    query = f"{direction} {keywords}".strip()
    if not (direction and publication_year):
        logging.error("配置文件缺少 'direction' 或 'publication_year' 参数，请检查 config.yaml。")
        return

    items = fetch_crossref(query, publication_year)
    if not items:
        logging.info("未获取到任何文献。")
        return

    processed_items = []
    for item in items:
        processed = {
            "title": item.get("title", ["无标题"])[0] if item.get("title") else "无标题",
            "abstract": item.get("abstract", "无摘要"),
            "authors": item.get("author", []),
            "date": item.get("issued", {}).get("date-parts", [[""]])[0][0],
            "DOI": item.get("DOI", "")
        }
        processed_items.append(processed)
    logging.info(f"初步获取到 {len(processed_items)} 篇文献。")

    filtered_items = []
    for item in processed_items:
        if ai_filter_qwen(item, direction):
            filtered_items.append(item)
            logging.info(f"文献《{item['title']}》通过 Qwen 过滤。")
        else:
            logging.info(f"文献《{item['title']}》未通过 Qwen 过滤。")
        time.sleep(1)  # 暂停1秒，避免请求过于频繁

    logging.info(f"经过 Qwen 过滤后，剩余文献数量：{len(filtered_items)}")
    save_filtered_items(filtered_items, filename="filtered_items.yaml")

    # 第二阶段：从保存结果中读取文献数据并上传至 Zotero
    items_to_upload = load_filtered_items("filtered_items.yaml")
    if items_to_upload:
        logging.info("开始上传文献到 Zotero ...")
        upload_items_to_zotero(items_to_upload)
    else:
        logging.info("没有可上传的文献。")

if __name__ == "__main__":
    main()
```

上面的代码主要完成了以下功能：

- 从 CrossRef API 获取文献数据
- 使用 Qwen API 对文献进行相关性评分
- 将筛选后的文献保存到 YAML 文件
- 将筛选后的文献转换为 Zotero API 所需格式
- 将文献上传到 Zotero

## 文库更新
```python
import requests
import json
import os
import yaml

# 读取配置文件
def load_config():
    with open('env.yml', 'r', encoding='utf-8') as f:
        return yaml.safe_load(f)

# 从配置文件中读取参数（使用 dict.get 提供默认值）
config = load_config()
ZOTERO_USER_ID = config.get('Zotero_user_id')
ZOTERO_API_KEY = config.get('Zotero_API_KEY')
ZOTERO_BASE_URL = config.get('Zotero_BASE_URL', 'https://api.zotero.org')  # 如果不存在则使用默认值

headers = {"Authorization": f"Bearer {ZOTERO_API_KEY}"}

# 1. 获取 Zotero 中的所有集合
def fetch_collections():
    url = f"{ZOTERO_BASE_URL}/users/{ZOTERO_USER_ID}/collections"
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"Error fetching collections: {e}")
        return []

# 2. 获取某个集合中的 PDF 文件
def fetch_pdf_items(collection_id):
    url = f"{ZOTERO_BASE_URL}/users/{ZOTERO_USER_ID}/collections/{collection_id}/items"
    params = {
        "format": "json",
        "include": "data",
        "limit": 100,
    }
    try:
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        items = response.json()
        pdf_items = [
            item for item in items
            if item["data"].get("itemType") == "attachment" and 
               item["data"].get("contentType", "").startswith("application/pdf")
        ]
        return pdf_items
    except Exception as e:
        print(f"Error fetching PDF items for collection {collection_id}: {e}")
        return []

# 3. 获取当前状态（已有 PDF 文件）并返回
def fetch_current_state():
    if os.path.exists("zotero_state.json"):
        with open("zotero_state.json", "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except Exception as e:
                print("Error reading state file, starting with an empty state:", e)
                return {}
    return {}

# 4. 保存当前状态并打印实时状态（只打印关键结果）
def save_current_state(state):
    print(" 当前实时状态：")
    print(json.dumps(state, ensure_ascii=False, indent=4))
    with open("zotero_state.json", "w", encoding="utf-8") as f:
        json.dump(state, f, ensure_ascii=False, indent=4)
    print(" 当前状态已保存为 zotero_state.json")

# 5. 对比更新：只统计并打印新增的 PDF 项
def check_updates():
    collections = fetch_collections()
    previous_state = fetch_current_state()
    new_state = {}
    update_summary = {"新增": []}

    for collection in collections:
        collection_id = collection["key"]
        collection_name = collection["data"].get("name", "Unnamed Collection")
        pdf_items = fetch_pdf_items(collection_id)
        for pdf in pdf_items:
            item_key = pdf["data"].get("key")
            new_state[item_key] = {"collection": collection_name}
            # 如果该 PDF 不在之前状态中，则视为新增项
            if item_key not in previous_state:
                update_summary["新增"].append({item_key: {"collection": collection_name}})
                
    print(" 更新信息统计：")
    print(f"新增：{len(update_summary['新增'])}")
    if update_summary["新增"]:
        print("详细新增项目：")
        for item in update_summary["新增"]:
            print(item)
    
    # 保存新的实时状态
    save_current_state(new_state)
    return update_summary

# 主函数：运行更新检查并保存更新信息
if __name__ == "__main__":
    update_summary = check_updates()
    with open("zotero_update_summary.json", "w", encoding="utf-8") as f:
        json.dump(update_summary, f, ensure_ascii=False, indent=4)
    print(" 更新信息已保存为 zotero_update_summary.json")

```

## 解读文献
```python
import os
import json
import yaml
from pathlib import Path
from openai import OpenAI

# ========== 步骤 1：读取配置 ==========
with open("env.yml", "r", encoding="utf-8") as file:
    env_config = yaml.safe_load(file)

Bai_Lian_API_KEY = env_config.get("Bai_Lian_API_KEY")
Zotero_Storage = env_config.get("Zotero_Storage")

if not Bai_Lian_API_KEY:
    raise ValueError("API Key 未正确读取，请检查 env.yml 文件！")

if not os.path.exists(Zotero_Storage):
    raise FileNotFoundError(f"Zotero_Storage 路径 {Zotero_Storage} 不存在！")

# ========== 步骤 2：设置客户端 ==========
client = OpenAI(
    api_key=Bai_Lian_API_KEY,
    base_url="https://dashscope.aliyuncs.com/compatible-mode/v1",
)

# ========== 步骤 3：定义 prompt 模板 ==========
PROMPT_TEMPLATE = """请按照以下步骤对文献进行深入解读和分析，确保结果逻辑清晰、内容全面：
# 此处替换为文章标题

## 基本信息提取

提取作者、发表年份、期刊名称等关键信息。

## 研究背景与目的

总结文献的研究背景，说明研究所解决的问题或提出的假设。
明确指出作者的研究目的和研究动机。

## 研究方法

描述作者采用的研究方法（如实验、调查、建模、定量/定性分析等）。
解释数据来源、采集方式以及实验设计或分析框架。
分析所选方法的优势和可能存在的局限性。

## 主要发现与结果

概述文章的核心发现和关键数据。
对图表、统计数据和实验结果进行总结和分析。
强调研究结果对原始问题的解答和新发现。

## 讨论与结论

分析作者如何讨论结果及其对研究领域的影响。
总结文章的结论，并指出研究局限性、未解决的问题或作者提出的未来研究方向。

## 创新点与贡献

指出文献在理论、方法或实践方面的创新与独特贡献。
讨论该研究如何推动领域的发展，及其实际应用意义。

## 个人评价与启示

提出对文献整体质量、方法合理性和结果可信度的评价。
指出文献中的不足或存在争议之处。
给出自己对相关领域未来研究的建议和启示。

请确保在解读过程中：
语言表达准确、逻辑清晰；
分析内容既关注整体框架也注意细节；
引用和解释关键概念和数据时要做到充分且有条理。

注意：在输出列表的时候，需要再列表头与列表项之间加入两个空行（换行符），否则Quarto渲染时候会出错。
"""

# ========== 核心函数：pdf2md ==========
def pdf2md():
    # 读取 json 文件
    with open("zotero_update_summary.json", "r", encoding="utf-8") as f:
        summary = json.load(f)

    # 创建 md 输出目录
    md_output_dir = os.path.join(os.getcwd(), "md")
    os.makedirs(md_output_dir, exist_ok=True)

    # 处理新增项
    for entry in summary.get("新增", []):
        for folder_name in entry:
            folder_path = os.path.join(Zotero_Storage, folder_name)
            if not os.path.exists(folder_path):
                print(f" 文件夹不存在：{folder_path}")
                continue

            # 查找 PDF 文件
            pdf_files = [
                os.path.join(folder_path, f)
                for f in os.listdir(folder_path)
                if f.lower().endswith(".pdf")
            ]
            if not pdf_files:
                print(f" 未找到 PDF 文件：{folder_path}")
                continue

            pdf_path = pdf_files[0]
            print(f"\n 开始处理：{folder_name}")

            # 上传 PDF 文件
            try:
                file_obj = client.files.create(file=Path(pdf_path), purpose="file-extract")
                file_id = file_obj.id
                print(f" file-id：{file_id}")
            except Exception as e:
                print(f" 上传失败：{pdf_path}，错误：{e}")
                continue

            # 发送解析请求
            print(" 正在发送请求解析文档...")
            try:
                completion = client.chat.completions.create(
                    model="qwen-long",
                    messages=[
                        {"role": "system", "content": f"fileid://{file_id}"},
                        {'role': 'user', 'content': PROMPT_TEMPLATE},
                    ],
                    temperature=0.2,
                )
                full_content = completion.choices[0].message.content
            except Exception as e:
                print(f" 解析失败：{folder_name}，错误：{e}")
                continue

            # 保存为 Markdown
            md_path = os.path.join(md_output_dir, f"{folder_name}.md")
            with open(md_path, "w", encoding="utf-8") as f:
                f.write(full_content)

            print(f" 解析成功并保存为 Markdown：{md_path}")

# ========== 启动 ==========
if __name__ == "__main__":
    pdf2md()

```

## 输出结果
```python
import yaml
import json
import os

# 路径配置
YML_PATH = "_quarto.yml"
STATE_PATH = "zotero_state.json"
MD_FOLDER = "md"  # md 文件夹

# 读取 _quarto.yml
with open(YML_PATH, "r", encoding="utf-8") as f:
    yml_data = yaml.safe_load(f)

# 确保 book 部分及 chapters 存在
yml_data.setdefault("book", {}).setdefault("chapters", [])

# 读取 zotero_state.json
with open(STATE_PATH, "r", encoding="utf-8") as f:
    zotero_state = json.load(f)

# 建立 collection -> [md 文件相对路径] 映射
collection_map = {}
for md_filename in os.listdir(MD_FOLDER):
    if md_filename.endswith(".md"):
        stem = os.path.splitext(md_filename)[0]  # 去掉 .md 后缀
        if stem in zotero_state:
            collection = zotero_state[stem]["collection"]
            # 将相对路径构造为："md/xxx.md"
            md_path = f"{MD_FOLDER}/{md_filename}"
            collection_map.setdefault(collection, []).append(md_path)

# 更新 yml_data，插入 md 文件到对应的 part 下
for collection, md_files in collection_map.items():
    # 查找是否已有对应的 part
    part_exists = False
    for item in yml_data["book"]["chapters"]:
        if isinstance(item, dict) and item.get("part") == collection:
            part_exists = True
            # 如果已有 part，直接插入新章节（避免重复）
            for md_file in md_files:
                if md_file not in item["chapters"]:
                    item["chapters"].append(md_file)
            break

    # 如果没有对应的 part，则创建新的 part 和章节
    if not part_exists:
        new_part = {"part": collection, "chapters": md_files}
        yml_data["book"]["chapters"].append(new_part)

# 写回 _quarto.yml，确保新的内容仅添加到 book 部分的 chapters 下
with open(YML_PATH, "w", encoding="utf-8") as f:
    yaml.dump(yml_data, f, allow_unicode=True, sort_keys=False)

print(" _quarto.yml 文件已成功更新！")

```

## 整合流程

我们使用 `invoke` 命令来执行自动化任务。所有任务均定义在 `tasks.py` 中，关键任务及其作用如下：

```python
import os
import sys
import yaml
import re
from subprocess import check_output
from invoke import task

def get_env_name(yaml_file="environment.yaml"):
    """
    通过 PyYAML 从 environment.yaml 文件中获取环境名称。
    若文件不存在或未找到 'name' 键，则输出警告或退出程序。
    """
    if os.path.exists(yaml_file):
        with open(yaml_file, "r", encoding="utf-8") as f:
            try:
                env_data = yaml.safe_load(f)
                env_name = env_data.get("name")
                if env_name:
                    return env_name.strip()
                else:
                    print("Warning: environment.yaml 中未找到 'name' 键。")
            except Exception as e:
                print("Error parsing environment.yaml:", e)
                sys.exit(1)
    else:
        print("Warning: environment.yaml 文件不存在。")
    return None

def conda_env_exists(env_name):
    """
    检查 Conda 环境是否存在。

    通过调用 "conda env list" 获取已注册的环境信息，
    如果输出中显示环境名称为完整路径，则提取最后一部分进行匹配，
    同时匹配不区分大小写。
    """
    try:
        envs_output = check_output("conda env list", shell=True, encoding="utf-8")
        target = env_name.lower()
        for line in envs_output.splitlines():
            line = line.strip()
            if not line or line.startswith("#"):
                continue
            # 去除当前激活环境标记 '*'
            line = line.replace("*", "").strip()
            match = re.match(r"^(\S+)", line)
            if match:
                candidate = match.group(1).strip()
                # 如果 candidate 是一个路径（包含路径分隔符），则提取 basename
                if os.path.sep in candidate:
                    candidate = os.path.basename(candidate)
                if candidate.lower() == target:
                    return True
        return False
    except Exception as e:
        print("无法检查 conda 环境:", e)
        return False

@task
def setup_env(c):
    """
    检查并创建或更新 Conda 环境。

      1. 从 environment.yaml 中读取目标环境名称；
      2. 如果当前已处于目标环境中，则直接退出；
      3. 如果目标环境已经存在，则提示用户手动激活；
      4. 如果目标环境不存在，则使用 environment.yaml 自动创建环境。
    """
    yaml_file = "environment.yaml"
    env_name = get_env_name(yaml_file)
    if not env_name:
        print("未能从 environment.yaml 获取环境名称。")
        sys.exit(1)

    print(f"目标 Conda 环境: {env_name}")

    # 检查当前是否已在目标环境中（忽略大小写）
    current_env = os.environ.get("CONDA_DEFAULT_ENV")
    if current_env and current_env.lower() == env_name.lower():
        print("当前已在目标 Conda 环境中。")
        return

    if conda_env_exists(env_name):
        print(f"环境 '{env_name}' 已存在。")
        print(f"请在命令行中运行: conda activate {env_name}")
        print("激活后再重新运行此命令。")
        sys.exit(0)
    else:
        print(f"环境 '{env_name}' 不存在，正在创建...")
        try:
            result = c.run(f"conda env create -f {yaml_file}", warn=True)
            if result.failed:
                print("创建环境失败，请手动处理。")
                sys.exit(1)
            else:
                print(f"环境创建成功！请运行: conda activate {env_name}")
                sys.exit(0)
        except Exception as e:
            print("创建环境失败，请手动处理：", e)
            sys.exit(1)

if __name__ == "__main__":
    from invoke import Program
    program = Program(namespace=globals())
    program.run()



@task
def run_paper(c):
    print("正在运行 paper.py...")
    c.run("python paper.py")    

@task
def run_zotero_update(c):
    print("正在运行 zotero_update.py...")
    c.run("python zotero_update.py")

@task
def run_pdf2md(c):
    print("正在运行 pdf2md.py...")
    c.run("python pdf2md.py")

@task
def run_add2yml(c):
    print("正在运行 add2yml.py...")
    c.run("python add2yml.py")

@task
def run_quarto(c):
    print("正在执行 quarto render...")
    c.run("quarto render")

@task(pre=[setup-env, run_zotero_update, run_pdf2md, run_add2yml, run_quarto])
def all(c):
    print("所有任务执行完成！")

```