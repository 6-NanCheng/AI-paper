[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AI给予的文献自动化管理系统",
    "section": "",
    "text": "前言\n本项目旨在构建一套集“文献抓取—智能筛选—数据存储—信息提取—成果展示”为一体的自动化文献管理系统。其核心功能包括：\n\n系统首先通过AI模型批量采集与特定主题相关的文献。 AI模型会对每篇文献进行关键字打分，进一步评估语义相关性，仅保留高关联度的文章。\n高质量文献将被保存到zotero进行结构化存储和标签管理，确保文献信息完整有序。\n系统通过调用AI大模型，从Zotero数据库中自动提取文献的关键信息并进行深入解读，并生成统一格式的Markdown文档。\n利用Quarto渲染生成直观、阅读流畅的网页展示界面，为用户呈现极致的文献浏览体验。",
    "crumbs": [
      "前言"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "zetora.html",
    "href": "zetora.html",
    "title": "2  第一步：使用Qwen检索相关文献",
    "section": "",
    "text": "2.1 第二步：将检索到的文献上传到Zetro进行文献管理\nimport os\nimport json\nimport yaml\nimport requests\n\n# 请在此处填写你的 Zotero 用户 ID 和 API Key\n\nUSER_ID = \"11510297\"\nAPI_KEY = \"Gvq4FIgC0J6eggLUigAn2E5a\"\n\n# 构造用于上传文献的 Zotero API URL\n# 新建项时应 POST 到 /users/{user_id}/items 接口\nZOTERO_UPLOAD_URL = f\"https://api.zotero.org/users/{USER_ID}/items\"\n\n# ---------------------------\n# 函数：load_filtered_items\n# 作用：从 YAML 文件中读取第一步筛选好的文献信息\n# ---------------------------\ndef load_filtered_items(filename=\"filtered_items.yaml\"):\n    try:\n        with open(filename, \"r\", encoding=\"utf-8\") as f:\n            items = yaml.safe_load(f)\n        print(f\"成功读取 {len(items)} 篇筛选后的文献。\")\n        return items\n    except Exception as e:\n        print(f\"读取文件 {filename} 时出错：\", e)\n        return []\n\n# ---------------------------\n# 函数：convert_to_zotero_format\n# 作用：转换单个文献的信息为符合 Zotero API 要求的数据格式\n#\n# 示例中假定每篇文献包含 \"title\", \"abstract\", \"authors\", \"date\", \"DOI\" 字段，\n# 转换为 Zotero 项（如期刊论文）的格式。你可能需要补充更多必需字段。\n# ---------------------------\ndef convert_to_zotero_format(item):\n    # 默认转换为期刊论文；实际上传时请确保数据包含 Zotero 要求的所有必要字段。\n    zotero_item = {\n        \"itemType\": \"journalArticle\",\n        \"title\": item.get(\"title\", \"无标题\"),\n        \"abstractNote\": item.get(\"abstract\", \"\"),\n        \"creators\": [],\n        \"date\": str(item.get(\"date\", \"\")),\n        \"DOI\": item.get(\"DOI\", \"\")\n    }\n    # 假设 \"authors\" 字段为一个列表，每个作者为字典，包含 \"name\" 或 \"firstName\"/\"lastName\" 信息\n    for author in item.get(\"authors\", []):\n        # 如果有单独的 firstName 与 lastName\n        if \"firstName\" in author and \"lastName\" in author:\n            creator = {\n                \"creatorType\": \"author\",\n                \"firstName\": author[\"firstName\"],\n                \"lastName\": author[\"lastName\"]\n            }\n        else:\n            # 若只有一个姓名字段，\n            creator = {\"creatorType\": \"author\", \"lastName\": author.get(\"name\", \"\").strip()}\n        zotero_item[\"creators\"].append(creator)\n    \n    return zotero_item\n\n# ---------------------------\n# 函数：upload_items_to_zotero\n# 作用：将转换后的文献数据上传到 Zotero\n#\n# 上传时，将文献数据以 JSON 数组传递给接口。请求头中通过 \"Zotero-API-Key\" 传递 API Key。\n# ---------------------------\ndef upload_items_to_zotero(items):\n    headers = {\n        \"Zotero-API-Key\": API_KEY,\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n    }\n    # 将每篇文献转换为 Zotero 格式\n    zotero_items = [convert_to_zotero_format(item) for item in items]\n    \n    # 这里假定接口支持批量上传文档。根据 Zotero API，不同接口可能要求的请求体结构略有不同，\n    # 有时需要逐条 POST。请根据实际文档修改。\n    payload = json.dumps(zotero_items, ensure_ascii=False)\n    \n    try:\n        response = requests.post(ZOTERO_UPLOAD_URL, headers=headers, data=payload)\n        if response.status_code in (200, 201):\n            print(\"文献上传成功！\")\n            try:\n                resp_json = response.json()\n                print(\"服务器返回的信息：\")\n                print(json.dumps(resp_json, ensure_ascii=False, indent=2))\n            except Exception as err:\n                print(\"解析服务器返回数据时出错：\", err)\n        else:\n            print(f\"上传失败，状态码: {response.status_code}\")\n            print(\"响应内容：\", response.text)\n    except Exception as e:\n        print(\"上传过程中出现错误：\", e)\n\n# ---------------------------\n# 主函数\n# ---------------------------\ndef main():\n    items = load_filtered_items(\"filtered_items.yaml\")\n    if items:\n        print(\"开始上传文献到 Zotero ...\")\n        upload_items_to_zotero(items)\n    else:\n        print(\"没有读取到可上传的文献。\")\n\nif __name__ == \"__main__\":\n    main()\n\n成功读取 2 篇筛选后的文献。\n开始上传文献到 Zotero ...\n文献上传成功！\n服务器返回的信息：\n{\n  \"successful\": {\n    \"0\": {\n      \"key\": \"I2QNRAH8\",\n      \"version\": 1092,\n      \"library\": {\n        \"type\": \"user\",\n        \"id\": 11510297,\n        \"name\": \"ZhangRui218\",\n        \"links\": {\n          \"alternate\": {\n            \"href\": \"https://www.zotero.org/zhangrui218\",\n            \"type\": \"text/html\"\n          }\n        }\n      },\n      \"links\": {\n        \"self\": {\n          \"href\": \"https://api.zotero.org/users/11510297/items/I2QNRAH8\",\n          \"type\": \"application/json\"\n        },\n        \"alternate\": {\n          \"href\": \"https://www.zotero.org/zhangrui218/items/I2QNRAH8\",\n          \"type\": \"text/html\"\n        }\n      },\n      \"meta\": {\n        \"parsedDate\": \"2025\",\n        \"numChildren\": 0\n      },\n      \"data\": {\n        \"key\": \"I2QNRAH8\",\n        \"version\": 1092,\n        \"itemType\": \"journalArticle\",\n        \"title\": \"MicroDIG: 基于自监督学习的大规模微生物组纵向数据有向互作估计\",\n        \"creators\": [],\n        \"abstractNote\": \"\",\n        \"publicationTitle\": \"\",\n        \"volume\": \"\",\n        \"issue\": \"\",\n        \"pages\": \"\",\n        \"date\": \"2025\",\n        \"series\": \"\",\n        \"seriesTitle\": \"\",\n        \"seriesText\": \"\",\n        \"journalAbbreviation\": \"\",\n        \"language\": \"\",\n        \"DOI\": \"10.1360/ssm-2024-0293\",\n        \"ISSN\": \"\",\n        \"shortTitle\": \"\",\n        \"url\": \"\",\n        \"accessDate\": \"\",\n        \"archive\": \"\",\n        \"archiveLocation\": \"\",\n        \"libraryCatalog\": \"\",\n        \"callNumber\": \"\",\n        \"rights\": \"\",\n        \"extra\": \"\",\n        \"tags\": [],\n        \"collections\": [],\n        \"relations\": {},\n        \"dateAdded\": \"2025-03-20T14:23:59Z\",\n        \"dateModified\": \"2025-03-20T14:23:59Z\"\n      }\n    },\n    \"1\": {\n      \"key\": \"JG9RNPJQ\",\n      \"version\": 1092,\n      \"library\": {\n        \"type\": \"user\",\n        \"id\": 11510297,\n        \"name\": \"ZhangRui218\",\n        \"links\": {\n          \"alternate\": {\n            \"href\": \"https://www.zotero.org/zhangrui218\",\n            \"type\": \"text/html\"\n          }\n        }\n      },\n      \"links\": {\n        \"self\": {\n          \"href\": \"https://api.zotero.org/users/11510297/items/JG9RNPJQ\",\n          \"type\": \"application/json\"\n        },\n        \"alternate\": {\n          \"href\": \"https://www.zotero.org/zhangrui218/items/JG9RNPJQ\",\n          \"type\": \"text/html\"\n        }\n      },\n      \"meta\": {\n        \"parsedDate\": \"2019\",\n        \"numChildren\": 0\n      },\n      \"data\": {\n        \"key\": \"JG9RNPJQ\",\n        \"version\": 1092,\n        \"itemType\": \"journalArticle\",\n        \"title\": \"Application of “Omics” on the Study of Interaction between Endophyte and Plant\",\n        \"creators\": [],\n        \"abstractNote\": \"\",\n        \"publicationTitle\": \"\",\n        \"volume\": \"\",\n        \"issue\": \"\",\n        \"pages\": \"\",\n        \"date\": \"2019\",\n        \"series\": \"\",\n        \"seriesTitle\": \"\",\n        \"seriesText\": \"\",\n        \"journalAbbreviation\": \"\",\n        \"language\": \"\",\n        \"DOI\": \"10.12677/amb.2019.82007\",\n        \"ISSN\": \"\",\n        \"shortTitle\": \"\",\n        \"url\": \"\",\n        \"accessDate\": \"\",\n        \"archive\": \"\",\n        \"archiveLocation\": \"\",\n        \"libraryCatalog\": \"\",\n        \"callNumber\": \"\",\n        \"rights\": \"\",\n        \"extra\": \"\",\n        \"tags\": [],\n        \"collections\": [],\n        \"relations\": {},\n        \"dateAdded\": \"2025-03-20T14:23:59Z\",\n        \"dateModified\": \"2025-03-20T14:23:59Z\"\n      }\n    }\n  },\n  \"success\": {\n    \"0\": \"I2QNRAH8\",\n    \"1\": \"JG9RNPJQ\"\n  },\n  \"unchanged\": {},\n  \"failed\": {}\n}",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>第一步：使用Qwen检索相关文献</span>"
    ]
  },
  {
    "objectID": "AI-Zetora.html",
    "href": "AI-Zetora.html",
    "title": "1  操作示例",
    "section": "",
    "text": "1.1 第一步：使用Qwen检索相关文献\nimport openai\nimport requests\nimport yaml\nimport time\n\n# ------------------------------------------------------------\n# 设置 Qwen API 的认证信息\n# ------------------------------------------------------------\n# 请确保 API 密钥安全，生产环境中建议通过配置或环境变量传递敏感信息\nopenai.api_key = \"sk-08ae8b6ba977447cba853e9b617fa10d\"\nopenai.api_base = \"https://dashscope.aliyuncs.com/compatible-mode/v1\"\n\n# ------------------------------------------------------------\n# 函数：fetch_crossref\n# 作用：调用 CrossRef API 根据查询条件获取文献数据\n# 参数：\n#   query      - 查询字符串（例如方向和关键词的组合）\n#   year_range - 出版年份范围，格式如 \"2018-2025\"\n# 返回值：一个包含文献信息的列表\n# ------------------------------------------------------------\ndef fetch_crossref(query, year_range):\n    url = \"https://api.crossref.org/works\"\n    params = {\n        \"query\": query,\n        \"filter\": f\"from-pub-date:{year_range.split('-')[0]},until-pub-date:{year_range.split('-')[1]}\",\n        \"rows\": 50  # 获取50篇文献，可根据实际需要修改\n    }\n    headers = {\n        \"User-Agent\": \"DocumentManager/1.0 (mailto:your_email@example.com)\"  # 建议替换为你自己的邮箱\n    }\n    response = requests.get(url, params=params, headers=headers)\n    if response.status_code == 200:\n        return response.json().get('message', {}).get('items', [])\n    else:\n        print(f\"CrossRef请求失败：{response.status_code}\")\n        return []\n\n# ------------------------------------------------------------\n# 函数：read_config\n# 作用：从 config.yaml 文件中读取配置参数（方向、关键词、出版年份范围）\n# 返回值：一个字典，包含配置信息\n# ------------------------------------------------------------\ndef read_config():\n    with open(\"config.yaml\", \"r\", encoding=\"utf-8\") as f:\n        return yaml.safe_load(f)\n\n# ------------------------------------------------------------\n# 函数：qwen_api_call\n# 作用：调用 Qwen API 生成对话回复（这里用于返回文献相关性评分）\n# 参数：\n#   prompt - 发送到模型的提示文本\n#   model  - 使用的模型名称，默认使用 \"qwen-max\"\n# 返回值：API 返回的文本（这里应为一个评分的数字字符串）\n# ------------------------------------------------------------\ndef qwen_api_call(prompt, model=\"qwen-max\"):\n    try:\n        completion = openai.ChatCompletion.create(\n            model=model,\n            messages=[\n                {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                {\"role\": \"user\", \"content\": prompt}\n            ],\n            temperature=0.0,  # 保证输出稳定\n            top_p=1.0,\n            max_tokens=10    # 输出长度，根据需要可调大\n        )\n        return completion.choices[0].message.content.strip()\n    except Exception as e:\n        print(\"Qwen API调用失败：\", e)\n        return \"\"\n\n# ------------------------------------------------------------\n# 函数：ai_filter_qwen\n# 作用：利用 Qwen API 对文献与设定方向的相关性进行评分，并判断是否超过阈值\n# 参数：\n#   item      - 单篇文献预处理后的数据（包含标题、摘要等）\n#   direction - 给定的研究方向或主题\n#   threshold - 评分阈值（默认0.6，&gt;=这个值则认为相关）\n# 返回值：如果文献相关返回 True，否则返回 False\n# ------------------------------------------------------------\ndef ai_filter_qwen(item, direction, threshold=0.6):\n    prompt = f\"\"\"\n请判断以下文献是否与“{direction}”密切相关，并请仅返回一个0到1之间的评分（保留两位小数）。\n\n标题：{item.get('title', '无标题')}\n摘要：{item.get('abstract', '无摘要')}\n\n评分标准：\n0.00 表示完全不相关，1.00 表示高度相关。\n\"\"\"\n    try:\n        response = qwen_api_call(prompt)\n        score_str = response.strip()\n        score = float(score_str)\n        print(f\"文献《{item['title'][:30]}...》评分：{score}\")\n        return score &gt;= threshold\n    except Exception as e:\n        print(f\"评分解析错误：{e}\")\n        return False\n\n# ------------------------------------------------------------\n# 函数：save_filtered_items\n# 作用：将过滤后的文献信息保存至指定文件（这里使用 YAML 格式）\n# ------------------------------------------------------------\ndef save_filtered_items(filtered_items, filename=\"filtered_items.yaml\"):\n    with open(filename, \"w\", encoding=\"utf-8\") as f:\n        yaml.safe_dump(filtered_items, f, allow_unicode=True)\n    print(f\"过滤后的文献信息已保存至 {filename}\")\n\n# ------------------------------------------------------------\n# 主函数\n# ------------------------------------------------------------\ndef main():\n    config = read_config()\n    direction = config.get(\"direction\", \"\")\n    keywords = \" \".join(config.get(\"keywords\", []))\n    publication_year = config.get(\"publication_year\", \"\")\n    \n    query = f\"{direction} {keywords}\"\n    items = fetch_crossref(query, publication_year)\n    \n    # 预处理文献数据，提取关键字段\n    processed_items = []\n    for item in items:\n        processed = {\n            \"title\": item.get(\"title\", [\"\"])[0] if item.get(\"title\") else \"无标题\",\n            \"abstract\": item.get(\"abstract\", \"无摘要\"),\n            \"authors\": item.get(\"author\", []),\n            \"date\": item.get(\"issued\", {}).get(\"date-parts\", [[\"\"]])[0][0],\n            \"DOI\": item.get(\"DOI\", \"\")\n        }\n        processed_items.append(processed)\n    \n    print(f\"初步获取到 {len(processed_items)} 篇文献。\")\n    \n    # 使用 Qwen API 对文献进行过滤，根据相关性评分判断是否通过\n    filtered_items = []\n    for item in processed_items:\n        if ai_filter_qwen(item, direction):\n            filtered_items.append(item)\n            print(f\"文献《{item['title']}》通过Qwen过滤。\")\n        else:\n            print(f\"文献《{item['title']}》未通过Qwen过滤。\")\n        time.sleep(1)  # 暂停1秒，防止请求过于频繁\n    \n    print(f\"经过Qwen过滤后，剩余文献数量：{len(filtered_items)}\")\n    \n    # 保存过滤后的文献信息到文件\n    save_filtered_items(filtered_items, filename=\"filtered_items.yaml\")\n\n# 当脚本作为主程序执行时，调用 main() 函数\nif __name__ == \"__main__\":\n    main()\n\n初步获取到 50 篇文献。\n文献《基于在生物教学中激发学生学习兴趣的研究...》评分：0.0\n文献《基于在生物教学中激发学生学习兴趣的研究》未通过Qwen过滤。\n文献《基于深度学习的工程图像识别与分类研究...》评分：0.05\n文献《基于深度学习的工程图像识别与分类研究》未通过Qwen过滤。\n文献《CT-CPI: Deep Learning Model of...》评分：0.05\n文献《CT-CPI: Deep Learning Model of Compound-Protein Interaction Based on Integrated CNN Module and Transformer》未通过Qwen过滤。\n文献《基于深度学习的工程检测智能化创新研究...》评分：0.01\n文献《基于深度学习的工程检测智能化创新研究》未通过Qwen过滤。\n文献《Research Progress of Predictin...》评分：0.05\n文献《Research Progress of Predicting Long Non-Coding RNA-MicroRNA Interaction Based on Deep Learning》未通过Qwen过滤。\n文献《Practice Exploration of “Inter...》评分：0.0\n文献《Practice Exploration of “Internet plus Deep Learning” Mixed Teaching System of Medical Physics》未通过Qwen过滤。\n文献《基于深度学习的工业机器人运动控制算法优化研究...》评分：0.0\n文献《基于深度学习的工业机器人运动控制算法优化研究》未通过Qwen过滤。\n文献《MicroDIG: 基于自监督学习的大规模微生物组纵向数据有...》评分：0.85\n文献《MicroDIG: 基于自监督学习的大规模微生物组纵向数据有向互作估计》通过Qwen过滤。\n文献《基于机器学习和深度学习的抗菌肽预测研究进展...》评分：0.25\n文献《基于机器学习和深度学习的抗菌肽预测研究进展》未通过Qwen过滤。\n文献《基于ANSYS的土与深基坑地连墙相互作用研究...》评分：0.0\n文献《基于ANSYS的土与深基坑地连墙相互作用研究》未通过Qwen过滤。\n文献《基于机器学习和深度学习的蛋白质结构预测研究进展...》评分：0.25\n文献《基于机器学习和深度学习的蛋白质结构预测研究进展》未通过Qwen过滤。\n文献《尊重幼儿，多维互动，深度学习，共同成长——基于互动课程促发幼...》评分：0.0\n文献《尊重幼儿，多维互动，深度学习，共同成长——基于互动课程促发幼儿深度学习的实践尝试》未通过Qwen过滤。\n文献《Research on Predicting TCR and...》评分：0.0\n文献《Research on Predicting TCR and Peptide Interaction Algorithms Based on Deep Learning》未通过Qwen过滤。\n文献《基于批判性思维的农村中学道德与法治课堂深度学习策略...》评分：0.0\n文献《基于批判性思维的农村中学道德与法治课堂深度学习策略》未通过Qwen过滤。\n文献《基于生物信息学分析的骨肉瘤hub基因的识别与免疫机制的研究...》评分：0.0\n文献《基于生物信息学分析的骨肉瘤hub基因的识别与免疫机制的研究》未通过Qwen过滤。\n文献《Research Progress on Predictin...》评分：0.02\n文献《Research Progress on Predicting Interaction between Long Noncoding RNA and Protein Based on Deep Learning》未通过Qwen过滤。\n文献《基于深度学习的乡土地理教学调研——以山西省为例...》评分：0.0\n文献《基于深度学习的乡土地理教学调研——以山西省为例》未通过Qwen过滤。\n文献《Deep Learning: New Engine for ...》评分：0.25\n文献《Deep Learning: New Engine for the Study of Material Microstructures and Physical Properties》未通过Qwen过滤。\n文献《基于深度学习的器官芯片驱动设备运行状态监测方法研究...》评分：0.0\n文献《基于深度学习的器官芯片驱动设备运行状态监测方法研究》未通过Qwen过滤。\n文献《Molecular biological studies o...》评分：0.25\n文献《Molecular biological studies on the interactions between bromoviruses and plants》未通过Qwen过滤。\n文献《信息管理与信息系统中基于深度学习的知识图谱构建与应用研究...》评分：0.05\n文献《信息管理与信息系统中基于深度学习的知识图谱构建与应用研究》未通过Qwen过滤。\n文献《AI 与教学深度融合：提升小学科学课堂教学的互动性与学习效果...》评分：0.0\n文献《AI 与教学深度融合：提升小学科学课堂教学的互动性与学习效果的研究与实践》未通过Qwen过滤。\n文献《A Study on the Learning State ...》评分：0.0\n文献《A Study on the Learning State of Classroom Students Based on Deep Learning》未通过Qwen过滤。\n文献《Application of “Omics” on the ...》评分：0.65\n文献《Application of “Omics” on the Study of Interaction between Endophyte and Plant》通过Qwen过滤。\n文献《基于深度学习的网络安全威胁智能识别与防御研究...》评分：0.0\n文献《基于深度学习的网络安全威胁智能识别与防御研究》未通过Qwen过滤。\n文献《课堂有效师生互动对法语学习者学习效果实证研究...》评分：0.0\n文献《课堂有效师生互动对法语学习者学习效果实证研究》未通过Qwen过滤。\n文献《基于核心素养的初中生物实验教学创新路径研究...》评分：0.0\n文献《基于核心素养的初中生物实验教学创新路径研究》未通过Qwen过滤。\n文献《Research on Building Extractio...》评分：0.0\n文献《Research on Building Extraction Method from Remote Sensing Images Based on Deep Learning》未通过Qwen过滤。\n文献《语言与动作的神经网络耦合：基于EEG的研究...》评分：0.0\n文献《语言与动作的神经网络耦合：基于EEG的研究》未通过Qwen过滤。\n文献《“梳理·探究·训练教学模式”与“深度学习路线”的整合研究与实...》评分：0.0\n文献《“梳理·探究·训练教学模式”与“深度学习路线”的整合研究与实践》未通过Qwen过滤。\n文献《园林绿化植物的养护管理工作研究...》评分：0.02\n文献《园林绿化植物的养护管理工作研究》未通过Qwen过滤。\n文献《Research on Cell Segmentation ...》评分：0.15\n文献《Research on Cell Segmentation Methods Based on Microfluidics and Deep Learning》未通过Qwen过滤。\n文献《Research Progress on Predictin...》评分：0.05\n文献《Research Progress on Predicting Interaction between Drugs Based on Graph Convolution Network》未通过Qwen过滤。\n文献《基于问题导向的高中生物课堂互动策略研究...》评分：0.0\n文献《基于问题导向的高中生物课堂互动策略研究》未通过Qwen过滤。\n文献《构造微生物学：地球生物学研究的新理念...》评分：0.15\n文献《构造微生物学：地球生物学研究的新理念》未通过Qwen过滤。\n文献《Application Research on Practi...》评分：0.2\n文献《Application Research on Practical Survival Problems Based on Deep Learning》未通过Qwen过滤。\n文献《浅谈初中物理教学的学生学习物理兴趣培养...》评分：0.0\n文献《浅谈初中物理教学的学生学习物理兴趣培养》未通过Qwen过滤。\n文献《基于问题的学习模式在物理教学中的应用——以《探究杠杆的平衡条...》评分：0.0\n文献《基于问题的学习模式在物理教学中的应用——以《探究杠杆的平衡条件》为例》未通过Qwen过滤。\n文献《基于深度学习的智能图像识别系统研究...》评分：0.15\n文献《基于深度学习的智能图像识别系统研究》未通过Qwen过滤。\n文献《土壤肥力与农作物产量的关系研究...》评分：0.25\n文献《土壤肥力与农作物产量的关系研究》未通过Qwen过滤。\n文献《初中物理课堂学生参与式学习的研究...》评分：0.0\n文献《初中物理课堂学生参与式学习的研究》未通过Qwen过滤。\n文献《基于土地储备的土地管理研究...》评分：0.0\n文献《基于土地储备的土地管理研究》未通过Qwen过滤。\n文献《Research and Analysis of Textu...》评分：0.0\n文献《Research and Analysis of Textual Multi-Emotion Based on Deep Learning》未通过Qwen过滤。\n文献《Advances in Studies on the Int...》评分：0.45\n文献《Advances in Studies on the Interaction between PGPR and Rhizobium》未通过Qwen过滤。\n文献《农作物中微喷灌技术的应用...》评分：0.0\n文献《农作物中微喷灌技术的应用》未通过Qwen过滤。\n文献《基于深度学习理念下的初中语文活动课堂的策略研究...》评分：0.0\n文献《基于深度学习理念下的初中语文活动课堂的策略研究》未通过Qwen过滤。\n文献《基于深度学习的测绘图像识别与处理...》评分：0.05\n文献《基于深度学习的测绘图像识别与处理》未通过Qwen过滤。\n文献《基于物理启发式的深度学习方法对蛋白质三维的结构修复与扩展采样...》评分：0.1\n文献《基于物理启发式的深度学习方法对蛋白质三维的结构修复与扩展采样》未通过Qwen过滤。\n文献《食品微生物检验的方法与质量控制...》评分：0.0\n文献《食品微生物检验的方法与质量控制》未通过Qwen过滤。\n文献《Research on Obstacle Detection...》评分：0.0\n文献《Research on Obstacle Detection for Intelligent Connected Autonomous Vehicles Based on Deep Learning》未通过Qwen过滤。\n经过Qwen过滤后，剩余文献数量：2\n过滤后的文献信息已保存至 filtered_items.yaml",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>操作示例</span>"
    ]
  },
  {
    "objectID": "AI-Zetora.html#第二步将检索到的文献上传到zetro进行文献管理",
    "href": "AI-Zetora.html#第二步将检索到的文献上传到zetro进行文献管理",
    "title": "1  操作示例",
    "section": "1.2 第二步：将检索到的文献上传到Zetro进行文献管理",
    "text": "1.2 第二步：将检索到的文献上传到Zetro进行文献管理\n\nimport os\nimport json\nimport yaml\nimport requests\n\n# 请在此处填写你的 Zotero 用户 ID 和 API Key\n\nUSER_ID = \"11510297\"\nAPI_KEY = \"Gvq4FIgC0J6eggLUigAn2E5a\"\n\n# 构造用于上传文献的 Zotero API URL\n# 新建项时应 POST 到 /users/{user_id}/items 接口\nZOTERO_UPLOAD_URL = f\"https://api.zotero.org/users/{USER_ID}/items\"\n\n# ---------------------------\n# 函数：load_filtered_items\n# 作用：从 YAML 文件中读取第一步筛选好的文献信息\n# ---------------------------\ndef load_filtered_items(filename=\"filtered_items.yaml\"):\n    try:\n        with open(filename, \"r\", encoding=\"utf-8\") as f:\n            items = yaml.safe_load(f)\n        print(f\"成功读取 {len(items)} 篇筛选后的文献。\")\n        return items\n    except Exception as e:\n        print(f\"读取文件 {filename} 时出错：\", e)\n        return []\n\n# ---------------------------\n# 函数：convert_to_zotero_format\n# 作用：转换单个文献的信息为符合 Zotero API 要求的数据格式\n#\n# 示例中假定每篇文献包含 \"title\", \"abstract\", \"authors\", \"date\", \"DOI\" 字段，\n# 转换为 Zotero 项（如期刊论文）的格式。你可能需要补充更多必需字段。\n# ---------------------------\ndef convert_to_zotero_format(item):\n    # 默认转换为期刊论文；实际上传时请确保数据包含 Zotero 要求的所有必要字段。\n    zotero_item = {\n        \"itemType\": \"journalArticle\",\n        \"title\": item.get(\"title\", \"无标题\"),\n        \"abstractNote\": item.get(\"abstract\", \"\"),\n        \"creators\": [],\n        \"date\": str(item.get(\"date\", \"\")),\n        \"DOI\": item.get(\"DOI\", \"\")\n    }\n    # 假设 \"authors\" 字段为一个列表，每个作者为字典，包含 \"name\" 或 \"firstName\"/\"lastName\" 信息\n    for author in item.get(\"authors\", []):\n        # 如果有单独的 firstName 与 lastName\n        if \"firstName\" in author and \"lastName\" in author:\n            creator = {\n                \"creatorType\": \"author\",\n                \"firstName\": author[\"firstName\"],\n                \"lastName\": author[\"lastName\"]\n            }\n        else:\n            # 若只有一个姓名字段，\n            creator = {\"creatorType\": \"author\", \"lastName\": author.get(\"name\", \"\").strip()}\n        zotero_item[\"creators\"].append(creator)\n    \n    return zotero_item\n\n# ---------------------------\n# 函数：upload_items_to_zotero\n# 作用：将转换后的文献数据上传到 Zotero\n#\n# 上传时，将文献数据以 JSON 数组传递给接口。请求头中通过 \"Zotero-API-Key\" 传递 API Key。\n# ---------------------------\ndef upload_items_to_zotero(items):\n    headers = {\n        \"Zotero-API-Key\": API_KEY,\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n    }\n    # 将每篇文献转换为 Zotero 格式\n    zotero_items = [convert_to_zotero_format(item) for item in items]\n    \n    # 这里假定接口支持批量上传文档。根据 Zotero API，不同接口可能要求的请求体结构略有不同，\n    # 有时需要逐条 POST。请根据实际文档修改。\n    payload = json.dumps(zotero_items, ensure_ascii=False)\n    \n    try:\n        response = requests.post(ZOTERO_UPLOAD_URL, headers=headers, data=payload)\n        if response.status_code in (200, 201):\n            print(\"文献上传成功！\")\n            try:\n                resp_json = response.json()\n                print(\"服务器返回的信息：\")\n                print(json.dumps(resp_json, ensure_ascii=False, indent=2))\n            except Exception as err:\n                print(\"解析服务器返回数据时出错：\", err)\n        else:\n            print(f\"上传失败，状态码: {response.status_code}\")\n            print(\"响应内容：\", response.text)\n    except Exception as e:\n        print(\"上传过程中出现错误：\", e)\n\n# ---------------------------\n# 主函数\n# ---------------------------\ndef main():\n    items = load_filtered_items(\"filtered_items.yaml\")\n    if items:\n        print(\"开始上传文献到 Zotero ...\")\n        upload_items_to_zotero(items)\n    else:\n        print(\"没有读取到可上传的文献。\")\n\nif __name__ == \"__main__\":\n    main()\n\n成功读取 2 篇筛选后的文献。\n开始上传文献到 Zotero ...\n文献上传成功！\n服务器返回的信息：\n{\n  \"successful\": {\n    \"0\": {\n      \"key\": \"I2QNRAH8\",\n      \"version\": 1092,\n      \"library\": {\n        \"type\": \"user\",\n        \"id\": 11510297,\n        \"name\": \"ZhangRui218\",\n        \"links\": {\n          \"alternate\": {\n            \"href\": \"https://www.zotero.org/zhangrui218\",\n            \"type\": \"text/html\"\n          }\n        }\n      },\n      \"links\": {\n        \"self\": {\n          \"href\": \"https://api.zotero.org/users/11510297/items/I2QNRAH8\",\n          \"type\": \"application/json\"\n        },\n        \"alternate\": {\n          \"href\": \"https://www.zotero.org/zhangrui218/items/I2QNRAH8\",\n          \"type\": \"text/html\"\n        }\n      },\n      \"meta\": {\n        \"parsedDate\": \"2025\",\n        \"numChildren\": 0\n      },\n      \"data\": {\n        \"key\": \"I2QNRAH8\",\n        \"version\": 1092,\n        \"itemType\": \"journalArticle\",\n        \"title\": \"MicroDIG: 基于自监督学习的大规模微生物组纵向数据有向互作估计\",\n        \"creators\": [],\n        \"abstractNote\": \"\",\n        \"publicationTitle\": \"\",\n        \"volume\": \"\",\n        \"issue\": \"\",\n        \"pages\": \"\",\n        \"date\": \"2025\",\n        \"series\": \"\",\n        \"seriesTitle\": \"\",\n        \"seriesText\": \"\",\n        \"journalAbbreviation\": \"\",\n        \"language\": \"\",\n        \"DOI\": \"10.1360/ssm-2024-0293\",\n        \"ISSN\": \"\",\n        \"shortTitle\": \"\",\n        \"url\": \"\",\n        \"accessDate\": \"\",\n        \"archive\": \"\",\n        \"archiveLocation\": \"\",\n        \"libraryCatalog\": \"\",\n        \"callNumber\": \"\",\n        \"rights\": \"\",\n        \"extra\": \"\",\n        \"tags\": [],\n        \"collections\": [],\n        \"relations\": {},\n        \"dateAdded\": \"2025-03-20T14:23:59Z\",\n        \"dateModified\": \"2025-03-20T14:23:59Z\"\n      }\n    },\n    \"1\": {\n      \"key\": \"JG9RNPJQ\",\n      \"version\": 1092,\n      \"library\": {\n        \"type\": \"user\",\n        \"id\": 11510297,\n        \"name\": \"ZhangRui218\",\n        \"links\": {\n          \"alternate\": {\n            \"href\": \"https://www.zotero.org/zhangrui218\",\n            \"type\": \"text/html\"\n          }\n        }\n      },\n      \"links\": {\n        \"self\": {\n          \"href\": \"https://api.zotero.org/users/11510297/items/JG9RNPJQ\",\n          \"type\": \"application/json\"\n        },\n        \"alternate\": {\n          \"href\": \"https://www.zotero.org/zhangrui218/items/JG9RNPJQ\",\n          \"type\": \"text/html\"\n        }\n      },\n      \"meta\": {\n        \"parsedDate\": \"2019\",\n        \"numChildren\": 0\n      },\n      \"data\": {\n        \"key\": \"JG9RNPJQ\",\n        \"version\": 1092,\n        \"itemType\": \"journalArticle\",\n        \"title\": \"Application of “Omics” on the Study of Interaction between Endophyte and Plant\",\n        \"creators\": [],\n        \"abstractNote\": \"\",\n        \"publicationTitle\": \"\",\n        \"volume\": \"\",\n        \"issue\": \"\",\n        \"pages\": \"\",\n        \"date\": \"2019\",\n        \"series\": \"\",\n        \"seriesTitle\": \"\",\n        \"seriesText\": \"\",\n        \"journalAbbreviation\": \"\",\n        \"language\": \"\",\n        \"DOI\": \"10.12677/amb.2019.82007\",\n        \"ISSN\": \"\",\n        \"shortTitle\": \"\",\n        \"url\": \"\",\n        \"accessDate\": \"\",\n        \"archive\": \"\",\n        \"archiveLocation\": \"\",\n        \"libraryCatalog\": \"\",\n        \"callNumber\": \"\",\n        \"rights\": \"\",\n        \"extra\": \"\",\n        \"tags\": [],\n        \"collections\": [],\n        \"relations\": {},\n        \"dateAdded\": \"2025-03-20T14:23:59Z\",\n        \"dateModified\": \"2025-03-20T14:23:59Z\"\n      }\n    }\n  },\n  \"success\": {\n    \"0\": \"I2QNRAH8\",\n    \"1\": \"JG9RNPJQ\"\n  },\n  \"unchanged\": {},\n  \"failed\": {}\n}",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>操作示例</span>"
    ]
  },
  {
    "objectID": "AI-Zetora.html#第三步将已保存到zetora文献上传到ai端",
    "href": "AI-Zetora.html#第三步将已保存到zetora文献上传到ai端",
    "title": "1  操作示例",
    "section": "1.3 第三步:将已保存到Zetora文献上传到AI端",
    "text": "1.3 第三步:将已保存到Zetora文献上传到AI端\n\nimport yaml\nimport os\nfrom pathlib import Path\nimport openai\n\n# 读取 env.yml 文件\nwith open(\"env.yml\", \"r\", encoding=\"utf-8\") as file:\n    env_config = yaml.safe_load(file)\n\n# 获取 API Key 和存储路径\nBai_Lian_API_KEY = env_config.get(\"Bai_Lian_API_KEY\")\nZotero_Storage = env_config.get(\"Zotero_Storage\")\n\n# 确保 API Key 存在\nif not Bai_Lian_API_KEY:\n    raise ValueError(\"API Key 未正确读取，请检查 env.yml 文件！\")\n\n# 确保 Zotero_Storage 目录存在\nif not os.path.exists(Zotero_Storage):\n    raise FileNotFoundError(f\"Zotero_Storage 路径 {Zotero_Storage} 不存在！\")\n\n# 获取所有 PDF 文件的路径\npdf_files = [\n    os.path.join(root, file)\n    for root, _, files in os.walk(Zotero_Storage)\n    for file in files if file.lower().endswith(\".pdf\")\n]\n\n# 设置 API 客户端\nclient = OpenAI(\n    api_key=Bai_Lian_API_KEY,\n    base_url=\"https://dashscope.aliyuncs.com/compatible-mode/v1\",\n)\n\n# 上传 PDF 文件并返回 file_id 列表\ndef upload_pdfs(pdf_files):\n    uploaded_files = []\n    for pdf in pdf_files:\n        try:\n            file_object = client.files.create(file=Path(pdf), purpose=\"file-extract\")\n            uploaded_files.append(file_object.id)\n            print(f\"成功上传：{pdf}，文件 ID：{file_object.id}\")\n        except Exception as e:\n            print(f\"上传失败：{pdf}，错误：{e}\")\n\n    return uploaded_files  # 直接返回 file_id 列表\n\n# 直接调用并获取 file_id 列表\nfile_ids = upload_pdfs(pdf_files)\n\n\n---------------------------------------------------------------------------\nFileNotFoundError                         Traceback (most recent call last)\nCell In[1], line 20\n     18 # 确保 Zotero_Storage 目录存在\n     19 if not os.path.exists(Zotero_Storage):\n---&gt; 20     raise FileNotFoundError(f\"Zotero_Storage 路径 {Zotero_Storage} 不存在！\")\n     22 # 获取所有 PDF 文件的路径\n     23 pdf_files = [\n     24     os.path.join(root, file)\n     25     for root, _, files in os.walk(Zotero_Storage)\n     26     for file in files if file.lower().endswith(\".pdf\")\n     27 ]\n\nFileNotFoundError: Zotero_Storage 路径 ./storage 不存在！",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>操作示例</span>"
    ]
  },
  {
    "objectID": "AI-Zetora.html#第四步提供提示词给ai解读文献",
    "href": "AI-Zetora.html#第四步提供提示词给ai解读文献",
    "title": "1  操作示例",
    "section": "1.4 第四步：提供提示词给AI解读文献",
    "text": "1.4 第四步：提供提示词给AI解读文献\n\n# 提示词模板\nPROMPT_TEMPLATE = \"\"\"请按照以下步骤对英文文献进行深入解读和分析，确保结果逻辑清晰、内容全面：\n## 文章标题\n\n提取文章标题\n\n### 基本信息提取\n\n提取文章作者、通讯作者的单位（附中文翻译）、发表年份、期刊名称等关键信息。\n\n### 研究背景\n\n- 总结文献的研究背景，说明研究所解决的问题或提出的假设。\n- 明确指出作者的研究目的和研究动机。\n\n### 研究结论\n\n- 概述文章的核心发现和关键数据。\n- 对图表、统计数据和实验结果进行总结和分析。\n- 强调研究结果对原始问题的解答和新发现。\n\n### 核心创新点\n\n- 指出文献在理论、方法或实践方面的创新与独特贡献。\n- 讨论该研究如何推动领域的发展，及其实际应用意义。\n\n### 实验设计\n\n- 指出研究使用的样品来源，材料出处等。\n- 描述作者采用的研究方法（如实验、调查、建模、定量/定性分析等）。\n- 解释数据来源、采集方式以及实验设计或分析框架。\n\n### 讨论\n\n分析作者如何讨论结果及其对研究领域的影响，并指出研究局限性、未解决的问题或作者提出的未来研究方向。\n\n### 产业转化可行性\n\n评估研究在产业转化上的前景并给出理由。\n\n### 结论\n\n最后，用一句话讲清楚研究的重要发现及意义。\n\n\n请确保在解读过程中：\n\n- 语言表达准确、逻辑清晰；\n- 分析内容既关注整体框架也注意细节；\n- 引用和解释关键概念和数据时要做到充分且有条理。\n\n注意：在输出列表的时候，需要再列表头与列表项之间加入两个空行（换行符），否则Quarto渲染时候会出错。\n\"\"\"\n\n\nimport os\nfrom openai import OpenAI\n\n# 初始化 OpenAI 客户端\nclient = OpenAI(\n    api_key=Bai_Lian_API_KEY,\n    base_url=\"https://dashscope.aliyuncs.com/compatible-mode/v1\",\n)\n\ndef parse_pdfs(file_ids):\n    \"\"\"使用 API 解析所有已上传的 PDF\"\"\"\n    if not file_ids:\n        raise ValueError(\"未找到任何 file_id，无法解析！\")\n\n    for file_id in file_ids:\n        print(f\"\\n正在解析文件 ID：{file_id}...\")\n        try:\n            completion = client.chat.completions.create(\n                model=\"qwen-long\",\n                messages=[\n                    {\"role\": \"system\", \"content\": f\"fileid://{file_id}\"},\n                    {'role': 'user', 'content': PROMPT_TEMPLATE},\n                ],\n                temperature=0.2,\n            )\n\n            # 访问 message.content 获取结果\n            full_content = completion.choices[0].message.content\n\n            print(\"\\n解析结果：\")\n            print(full_content)\n\n        except Exception as e:\n            print(f\"解析失败：文件 ID {file_id}，错误：{e}\")\n\n\n# **直接调用解析代码**\nparse_pdfs(file_ids)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>操作示例</span>"
    ]
  },
  {
    "objectID": "AI-Zetora.html#将输出报告保存为md格式文件",
    "href": "AI-Zetora.html#将输出报告保存为md格式文件",
    "title": "1  操作示例",
    "section": "1.5 将输出报告保存为md格式文件",
    "text": "1.5 将输出报告保存为md格式文件\n\n\nimport os\n\ndef save_markdown(full_content, file_name=\"AI解读结果.md\"):\n    \"\"\"将 full_content 保存为 .md 文件\"\"\"\n    if not full_content:\n        print(\"没有有效的内容\")\n        return None\n\n    # 获取当前工作目录\n    current_directory = os.getcwd()\n\n    # 设置文件路径\n    file_path = os.path.join(current_directory, file_name)\n\n    # 保存 full_content 到文件\n    with open(file_path, 'w', encoding='utf-8') as f:\n        f.write(full_content)\n\n    print(f\"Markdown 文件已保存: {file_path}\")\n    return file_path\n\n# 示例调用\nsave_markdown(full_content)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>操作示例</span>"
    ]
  },
  {
    "objectID": "AI解读结果.html",
    "href": "AI解读结果.html",
    "title": "2  基本信息提取",
    "section": "",
    "text": "AI解读报告\n文章标题：\nMicroDIG: estimating directed interactions in large-scale microbiome longitudinal data based on self-supervised learning\n作者：\n喻姚洋1,2†, 章文浩1†, 孙丰珠3, 王颖1,2,4∗\n通讯作者单位：\n厦门大学自动化系，厦门市 361101\n厦门大学国家健康医疗大数据研究院，厦门市 361101\nDepartment of Biological Sciences, University of Southern California, Los Angeles 90089\n厦门市大数据智能分析与决策重点实验室，厦门市 361101\n发表年份：\n2024\n期刊名称：\nSCIENTIA SINICA Mathematica（《中国科学：数学》）\n\n\n2.0.1 研究背景\n微生物群落内的物种通过复杂的作用关系互相影响、相互依存，维持动态平衡。探索微生物群落的物种作用，对理解群落功能和机理十分重要。传统方法如湿实验培养微生物和基于相关性统计的方法（如 Pearson 和 Spearman）存在诸多限制，难以有效估计物种间的有向作用关系。本研究旨在开发一种基于自监督学习的框架 MicroDIG，利用微生物群落的纵向时序物种丰度数据，估计并校验大规模微生物群落内物种间的有向作用关系。\n\n\n\n2.0.2 研究结论\n文章的核心发现是 MicroDIG 在估计微生物群落物种间的有向作用关系方面表现出色，优于五类基准方法。具体表现为：\n\n推断精度：MicroDIG 的推断精度显著高于其他方法，尤其在大规模微生物群落中表现优异。\n假阳性率：MicroDIG 有效降低了估计结果的假阳性率，准确识别物种间的作用方向。\n适用性：MicroDIG 适用于各种群落规模，特别是传统方法难以处理的大规模群落。\n可解释性和可扩展性：MicroDIG 模型具有清晰的可解释性和灵活的可扩展性，可以应用于复杂的真实场景中。\n\n\n\n\n2.0.3 核心创新点\n\n自监督学习框架：MicroDIG 提出了基于自监督学习的框架，无需标准答案的训练数据，解决了微生物时序丰度数据不足和作用关系标签缺失的问题。\nGLV 方程与神经网络结合：将 Generalized Lotka-Volterra (GLV) 方程的数学机理与神经网络相结合，实现了对物种间有向作用关系的估计。\n有效性校验：设计了严格的统计校验策略，确保估计结果的可靠性和高置信度。\n灵活性和可扩展性：MicroDIG 框架内置的自编码器可以根据使用场景灵活替换为其他网络模型（如 GCN、Transformer 或 LSTM），提升了模型的适应性和应用范围。\n\n\n\n\n2.0.4 实验设计\n\n样品来源：\n使用了多角度多层次的仿真数据及人类肠道微生物群落的真实数据。\n研究方法：\n\n自监督数据增强：基于 GLV 方程生成大量自带有向作用关系标签的训练数据。\n有向作用关系估计：通过自编码器神经网络学习物种间的有向作用强度。\n有效性校验：通过仿真生成估计值为真/假时的两类 p 值分布，基于极大似然估计校验估计值的真/假。\n\n数据来源与采集方式：\n\n仿真数据：使用第三方工具 miaSim 生成不同规模和作用模式的微生物群落丰度数据。\n真实数据：使用健康女性受试者在六个月内对肠道（粪便）进行取样测序得到的共计 131 个时间点的肠道微生物组时序丰度数据。\n\n\n\n\n\n2.0.5 讨论\n作者详细讨论了 MicroDIG 的结果及其对微生物群落研究领域的影响：\n\n优势：MicroDIG 在估计物种间有向作用关系方面表现出色，特别是在大规模群落中，其性能优于现有方法。\n局限性：目前 MicroDIG 仅限于两个物种间的有向作用关系建模分析，无法处理更复杂的多物种共同作用关系。\n未来研究方向：作者建议在未来的研究中，可以考虑引入更复杂的网络结构（如图网络）和外部因素（如宿主健康状态、环境变化等），以提高模型的预测精度和适用性。\n\n\n\n\n2.0.6 产业转化可行性\nMicroDIG 在产业转化方面具有广阔的前景。其自监督学习框架和 GLV 方程结合的方法可以应用于多个领域，如：\n\n医疗健康：用于分析肠道微生物组与疾病的关系，开发个性化医疗方案。\n生态学：研究生态系统中微生物群落的动态变化，指导环境保护和生态修复。\n农业：优化作物微生物组，提高农作物产量和抗病能力。\n\n\n\n\n2.0.7 结论\nMicroDIG 成功开发了一种基于自监督学习的框架，能够准确估计和校验大规模微生物群落内物种间的有向作用关系，为微生物群落研究提供了新的工具和方法，具有重要的理论和应用价值。",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>AI解读报告</span>"
    ]
  }
]